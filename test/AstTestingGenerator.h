#ifndef MASTER_THESIS_CODE_ASTTESTINGGENERATOR_H
#define MASTER_THESIS_CODE_ASTTESTINGGENERATOR_H

#include <Ast.h>

/// The ASTs generated by this class are used for tests. Hence, any modifications will break the tests!
class AstTestingGenerator {
 public:
  /// Generates a new demo AST.
  /// \param id The ID of the demo AST to generate.
  /// \param ast The AST object in which the demo AST is written into.
  static void generateAst(int id, Ast &ast);

  /// Returns the largest ID that is supported by method generateAst.
  /// \return An integer specifying the largest ID supported by generateAst.
  static int getLargestId();

  // Methods to generate sample ASTs to be used for tests.
  static void _genAstRewritingOne(Ast &ast);
  static void _genAstRewritingTwo(Ast &ast);
  static void _genAstRewritingThree(Ast &ast);
  static void _genAstRewritingFour(Ast &ast);
  static void _genAstRewritingFive(Ast &ast);
  static void _genAstRewritingSix(Ast &ast);
  static void _genAstEvalOne(Ast &ast);
  static void _genAstEvalTwo(Ast &ast);
  static void _genAstEvalThree(Ast &ast);
  static void _genAstEvalFour(Ast &ast);
  static void _genAstEvalFive(Ast &ast);
  static void _genAstEvalSix(Ast &ast);
  static void _genAstEvalSeven(Ast &ast);
  static void _genAstPrintVisitorOne(Ast &ast);
  static void _genAstPrintVisitorTwo(Ast &ast);
  static void _genAstMultDepthOne(Ast &ast);
  static void _genAstMultDepthTwo(Ast &ast);
  static void _genAstRewritingSimple(Ast &ast);
  static void _genAstRewritingSimpleExtended(Ast &ast);
};

#endif //MASTER_THESIS_CODE_ASTTESTINGGENERATOR_H
